#!/usr/bin/expect -f
#
# This Expect script was generated by autoexpect on Fri Mar 31 13:45:19 2017
# Expect and autoexpect were both written by Don Libes, NIST.
#
# Note that autoexpect does not guarantee a working script.  It
# necessarily has to guess about certain things.  Two reasons a script
# might fail are:
#
# 1) timing - A surprising number of programs (rn, ksh, zsh, telnet,
# etc.) and devices discard or ignore keystrokes that arrive "too
# quickly" after prompts.  If you find your new script hanging up at
# one spot, try adding a short sleep just before the previous send.
# Setting "force_conservative" to 1 (see below) makes Expect do this
# automatically - pausing briefly before sending each character.  This
# pacifies every program I know of.  The -c flag makes the script do
# this in the first place.  The -C flag allows you to define a
# character to toggle this mode off and on.

set force_conservative 0  ;# set to 1 to force conservative mode even if
			  ;# script wasn't run conservatively originally
if {$force_conservative} {
	set send_slow {1 .1}
	proc send {ignore arg} {
		sleep .1
		exp_send -s -- $arg
	}
}

#
# 2) differing output - Some programs produce different output each time
# they run.  The "date" command is an obvious example.  Another is
# ftp, if it produces throughput statistics at the end of a file
# transfer.  If this causes a problem, delete these patterns or replace
# them with wildcards.  An alternative is to use the -p flag (for
# "prompt") which makes Expect only look for the last line of output
# (i.e., the prompt).  The -P flag allows you to define a character to
# toggle this mode off and on.
#
# Read the man page for more info.
#
# -Don


set timeout -1
set PROG [lindex $argv 0]
spawn ./$PROG tests/t1.hex
match_max 100000
expect -exact "CS 350 Final Project: LC-3 Simulator Loading tests/t1.hex\r
Origin = x1000\r
\r
CPU STATE:\r
PC = x1000   IR = x0000   CC = Z   RUNNING: 1\r
R0 x0000  0       R1 x0000  0       R2 x0000  0       R3 x0000  0    \r
R4 x0000  0       R5 x0000  0       R6 x0000  0       R7 x0000  0    \r
\r
MEMORY (from x1000):\r
x1000: x200C    8204  LD    R0, 12       \r
x1001: x1221    4641  ADD   R1, R0, 1    \r
x1002: x1401    5121  ADD   R2, R0, R1   \r
x1003: x94BF   38079  NOT   R2, R2       \r
x1004: x166F    5743  ADD   R3, R1, 15   \r
x1005: x1830    6192  ADD   R4, R0, -16  \r
x1006: x1B04    6916  ADD   R5, R4, R4   \r
x1007: x5D05   23813  AND   R6, R4, R5   \r
x1008: x5E3F   24127  AND   R7, R0, -1   \r
x1009: x5030   20528  AND   R0, R0, -16  \r
x100A: x52EF   21231  AND   R1, R3, 15   \r
x100B: x5FE0   24544  AND   R7, R7, 0    \r
x100C: xF025   61477  TRAP  x25          \r
x100D: x7FFF   32767  STR   R7, R7, -1   \r
\r
\r
Beginning execution; type h for help\r
\$> "
send -- "h\r"
expect -exact "h\r
Simulator commands:\r
h, H, or ? for help (prints this message)\r
q or Q to quit\r
d or D to dump the control unit and memory\r
An integer > 0 to execute that many instruction cycles\r
Or just return, which executes one instruction cycle\r
\$> "
send -- "d\r"
expect -exact "d\r
CPU STATE:\r
PC = x1000   IR = x0000   CC = Z   RUNNING: 1\r
R0 x0000  0       R1 x0000  0       R2 x0000  0       R3 x0000  0    \r
R4 x0000  0       R5 x0000  0       R6 x0000  0       R7 x0000  0    \r
\r
MEMORY (from x0000):\r
x1000: x200C    8204  LD    R0, 12       \r
x1001: x1221    4641  ADD   R1, R0, 1    \r
x1002: x1401    5121  ADD   R2, R0, R1   \r
x1003: x94BF   38079  NOT   R2, R2       \r
x1004: x166F    5743  ADD   R3, R1, 15   \r
x1005: x1830    6192  ADD   R4, R0, -16  \r
x1006: x1B04    6916  ADD   R5, R4, R4   \r
x1007: x5D05   23813  AND   R6, R4, R5   \r
x1008: x5E3F   24127  AND   R7, R0, -1   \r
x1009: x5030   20528  AND   R0, R0, -16  \r
x100A: x52EF   21231  AND   R1, R3, 15   \r
x100B: x5FE0   24544  AND   R7, R7, 0    \r
x100C: xF025   61477  TRAP  x25          \r
x100D: x7FFF   32767  STR   R7, R7, -1   \r
\r
\$> "
send -- "\r"
expect -exact "\r
x1000: x200C  LD    R0, 12       ; R0 <- M\[x100D\] = x7FFF; CC = P\r
\$> "
send -- "\r"
expect -exact "\r
x1001: x1221  ADD   R1, R0, 1    ; R1 <- x7FFF +1 = x8000; CC = N\r
\$> "
send -- "\r"
expect -exact "\r
x1002: x1401  ADD   R2, R0, R1   ; R2 <- x7FFF + x8000 = xFFFF; CC = N\r
\$> "
send -- "\r"
expect -exact "\r
x1003: x94BF  NOT   R2, R2       ; R2 <- NOT xFFFF = x0000; CC = Z\r
\$> "
send -- "\r"
expect -exact "\r
x1004: x166F  ADD   R3, R1, 15   ; R3 <- x8000 +15 = x800F; CC = N\r
\$> "
send -- "\r"
expect -exact "\r
x1005: x1830  ADD   R4, R0, -16  ; R4 <- x7FFF -16 = x7FEF; CC = P\r
\$> "
send -- "\r"
expect -exact "\r
x1006: x1B04  ADD   R5, R4, R4   ; R5 <- x7FEF + x7FEF = xFFDE; CC = N\r
\$> "
send -- "\r"
expect -exact "\r
x1007: x5D05  AND   R6, R4, R5   ; x7FEF & xFFDE = x7FCE; CC = P\r
\$> "
send -- "\r"
expect -exact "\r
x1008: x5E3F  AND   R7, R0, -1   ; R7 <- x7FFF & xFFFF = x7FFF; CC = P\r
\$> "
send -- "\r"
expect -exact "\r
x1009: x5030  AND   R0, R0, -16  ; R0 <- x7FFF & xFFF0 = x7FF0; CC = P\r
\$> "
send -- "\r"
expect -exact "\r
x100A: x52EF  AND   R1, R3, 15   ; R1 <- x800F & x000F = xF; CC = P\r
\$> "
send -- "\r"
expect -exact "\r
x100B: x5FE0  AND   R7, R7, 0    ; R7 <- x7FFF & x0000 = x0; CC = Z\r
\$> "
send -- "\r"
expect -exact "\r
x100C: xF025  TRAP  x25          ; CC = P; Halting\r
\$> "
send -- "\r"
expect -exact "\r
Halted\r
\$> "
send -- "\r"
expect -exact "\r
Halted\r
\$> "
send -- "\r"
expect -exact "\r
Halted\r
\$> "
send -- "q\r"
expect eof
