#!/usr/bin/expect -f
#
# This Expect script was generated by autoexpect on Fri Mar 31 13:49:56 2017
# Expect and autoexpect were both written by Don Libes, NIST.
#
# Note that autoexpect does not guarantee a working script.  It
# necessarily has to guess about certain things.  Two reasons a script
# might fail are:
#
# 1) timing - A surprising number of programs (rn, ksh, zsh, telnet,
# etc.) and devices discard or ignore keystrokes that arrive "too
# quickly" after prompts.  If you find your new script hanging up at
# one spot, try adding a short sleep just before the previous send.
# Setting "force_conservative" to 1 (see below) makes Expect do this
# automatically - pausing briefly before sending each character.  This
# pacifies every program I know of.  The -c flag makes the script do
# this in the first place.  The -C flag allows you to define a
# character to toggle this mode off and on.

set force_conservative 0  ;# set to 1 to force conservative mode even if
			  ;# script wasn't run conservatively originally
if {$force_conservative} {
	set send_slow {1 .1}
	proc send {ignore arg} {
		sleep .1
		exp_send -s -- $arg
	}
}

#
# 2) differing output - Some programs produce different output each time
# they run.  The "date" command is an obvious example.  Another is
# ftp, if it produces throughput statistics at the end of a file
# transfer.  If this causes a problem, delete these patterns or replace
# them with wildcards.  An alternative is to use the -p flag (for
# "prompt") which makes Expect only look for the last line of output
# (i.e., the prompt).  The -P flag allows you to define a character to
# toggle this mode off and on.
#
# Read the man page for more info.
#
# -Don


set timeout -1
set PROG [lindex $argv 0]
spawn ./$PROG tests/t8.hex
match_max 100000
expect -exact "CS 350 Final Project: LC-3 Simulator Loading tests/t8.hex\r
Origin = x8000\r
\r
CPU STATE:\r
PC = x8000   IR = x0000   CC = Z   RUNNING: 1\r
R0 x0000  0       R1 x0000  0       R2 x0000  0       R3 x0000  0    \r
R4 x0000  0       R5 x0000  0       R6 x0000  0       R7 x0000  0    \r
\r
MEMORY (from x8000):\r
x8000: xE000   57344  LEA   R0, 0        \r
x8001: xE2FF   58111  LEA   R1, 255      \r
x8002: xE500   58624  LEA   R2, -256     \r
x8003: x3101   12545  ST    R0, -255     \r
x8004: x2700    9984  LD    R3, -256     \r
x8005: x32FF   13055  ST    R1, 255      \r
x8006: x28FE   10494  LD    R4, 254      \r
x8007: x765F   30303  STR   R3, R1, 31   \r
x8008: x685F   26719  LDR   R4, R1, 31   \r
x8009: x7860   30816  STR   R4, R1, -32  \r
x800A: x6A60   27232  LDR   R5, R1, -32  \r
x800B: xB0FF   45311  STI   R0, 255      \r
x800C: xACFE   44286  LDI   R6, 254      \r
x800D: xF025   61477  TRAP  x25          \r
x810B: x800E   32782  RTI                \r
\r
\r
Beginning execution; type h for help\r
\$> "
send -- "h\r"
expect -exact "h\r
Simulator commands:\r
h, H, or ? for help (prints this message)\r
q or Q to quit\r
d or D to dump the control unit and memory\r
An integer > 0 to execute that many instruction cycles\r
Or just return, which executes one instruction cycle\r
\$> "
send -- "d\r"
expect -exact "d\r
CPU STATE:\r
PC = x8000   IR = x0000   CC = Z   RUNNING: 1\r
R0 x0000  0       R1 x0000  0       R2 x0000  0       R3 x0000  0    \r
R4 x0000  0       R5 x0000  0       R6 x0000  0       R7 x0000  0    \r
\r
MEMORY (from x0000):\r
x8000: xE000   57344  LEA   R0, 0        \r
x8001: xE2FF   58111  LEA   R1, 255      \r
x8002: xE500   58624  LEA   R2, -256     \r
x8003: x3101   12545  ST    R0, -255     \r
x8004: x2700    9984  LD    R3, -256     \r
x8005: x32FF   13055  ST    R1, 255      \r
x8006: x28FE   10494  LD    R4, 254      \r
x8007: x765F   30303  STR   R3, R1, 31   \r
x8008: x685F   26719  LDR   R4, R1, 31   \r
x8009: x7860   30816  STR   R4, R1, -32  \r
x800A: x6A60   27232  LDR   R5, R1, -32  \r
x800B: xB0FF   45311  STI   R0, 255      \r
x800C: xACFE   44286  LDI   R6, 254      \r
x800D: xF025   61477  TRAP  x25          \r
x810B: x800E   32782  RTI                \r
\r
\$> "
send -- "\r"
expect -exact "\r
x8000: xE000  LEA   R0, 0        ; R0 <- x8001; CC = N\r
\$> "
send -- "\r"
expect -exact "\r
x8001: xE2FF  LEA   R1, 255      ; R1 <- x8101; CC = N\r
\$> "
send -- "\r"
expect -exact "\r
x8002: xE500  LEA   R2, -256     ; R2 <- x7F03; CC = P\r
\$> "
send -- "\r"
expect -exact "\r
x8003: x3101  ST    R0, -255     ; M\[x7F05\] <- x8001\r
\$> "
send -- "\r"
expect -exact "\r
x8004: x2700  LD    R3, -256     ; R3 <- M\[x7F05\] = x8001; CC = N\r
\$> "
send -- "\r"
expect -exact "\r
x8005: x32FF  ST    R1, 255      ; M\[x8105\] <- x8101\r
\$> "
send -- "\r"
expect -exact "\r
x8006: x28FE  LD    R4, 254      ; R4 <- M\[x8105\] = x8101; CC = N\r
\$> "
send -- "\r"
expect -exact "\r
x8007: x765F  STR   R3, R1, 31   ; M\[x8101 +31\] = M\[x8120\] <- x8001\r
\$> "
send -- "\r"
expect -exact "\r
x8008: x685F  LDR   R4, R1, 31   ; R4 <- M\[x8101 +31\] = M\[x8120\] = x8001; CC = N\r
\$> "
send -- "\r"
expect -exact "\r
x8009: x7860  STR   R4, R1, -32  ; M\[x8101 -32\] = M\[x80E1\] <- x8001\r
\$> "
send -- "\r"
expect -exact "\r
x800A: x6A60  LDR   R5, R1, -32  ; R5 <- M\[x8101 -32\] = M\[x80E1\] = x8001; CC = N\r
\$> "
send -- "\r"
expect -exact "\r
x800B: xB0FF  STI   R0, 255      ; M\[M\[x810B\]\]= M\[x800E\] <- x8001\r
\$> "
send -- "\r"
expect -exact "\r
x800C: xACFE  LDI   R6, 254      ; R6 <- M\[M\[x810B\]\] = M\[x800E\]  = x8001; CC = N\r
\$> "
send -- "\r"
expect -exact "\r
x800D: xF025  TRAP  x25          ; CC = P; Halting\r
\$> "
send -- "\r"
expect -exact "\r
Halted\r
\$> "
send -- "\r"
expect -exact "\r
Halted\r
\$> "
send -- "\r"
expect -exact "\r
Halted\r
\$> "
send -- "q\r"
expect eof
