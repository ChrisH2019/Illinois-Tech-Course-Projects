#!/usr/bin/expect -f
#
# This Expect script was generated by autoexpect on Fri Mar 31 13:47:52 2017
# Expect and autoexpect were both written by Don Libes, NIST.
#
# Note that autoexpect does not guarantee a working script.  It
# necessarily has to guess about certain things.  Two reasons a script
# might fail are:
#
# 1) timing - A surprising number of programs (rn, ksh, zsh, telnet,
# etc.) and devices discard or ignore keystrokes that arrive "too
# quickly" after prompts.  If you find your new script hanging up at
# one spot, try adding a short sleep just before the previous send.
# Setting "force_conservative" to 1 (see below) makes Expect do this
# automatically - pausing briefly before sending each character.  This
# pacifies every program I know of.  The -c flag makes the script do
# this in the first place.  The -C flag allows you to define a
# character to toggle this mode off and on.

set force_conservative 0  ;# set to 1 to force conservative mode even if
			  ;# script wasn't run conservatively originally
if {$force_conservative} {
	set send_slow {1 .1}
	proc send {ignore arg} {
		sleep .1
		exp_send -s -- $arg
	}
}

#
# 2) differing output - Some programs produce different output each time
# they run.  The "date" command is an obvious example.  Another is
# ftp, if it produces throughput statistics at the end of a file
# transfer.  If this causes a problem, delete these patterns or replace
# them with wildcards.  An alternative is to use the -p flag (for
# "prompt") which makes Expect only look for the last line of output
# (i.e., the prompt).  The -P flag allows you to define a character to
# toggle this mode off and on.
#
# Read the man page for more info.
#
# -Don


set timeout -1
set PROG [lindex $argv 0]
spawn ./$PROG tests/t6.hex
match_max 100000
expect -exact "CS 350 Final Project: LC-3 Simulator Loading tests/t6.hex\r
Origin = x8000\r
\r
CPU STATE:\r
PC = x8000   IR = x0000   CC = Z   RUNNING: 1\r
R0 x0000  0       R1 x0000  0       R2 x0000  0       R3 x0000  0    \r
R4 x0000  0       R5 x0000  0       R6 x0000  0       R7 x0000  0    \r
\r
MEMORY (from x8000):\r
x8001: x0200     512  BRP   0            \r
x8002: x0401    1025  BRZ   1            \r
x8003: x09FF    2559  BRN   -1           \r
x8004: x0AFF    2815  BRNP  255          \r
x8005: x0D00    3328  BRNZ  -256         \r
x8006: x0E00    3584  BR    0            \r
x8007: x12A0    4768  ADD   R1, R2, 0    \r
x8008: x172F    5935  ADD   R3, R4, 15   \r
x8009: x1BB0    7088  ADD   R5, R6, -16  \r
x800A: x1FC7    8135  ADD   R7, R7, R7   \r
x800B: x2100    8448  LD    R0, -256     \r
x800C: x23FF    9215  LD    R1, -1       \r
x800D: x2400    9216  LD    R2, 0        \r
x800E: x2601    9729  LD    R3, 1        \r
x800F: x28FF   10495  LD    R4, 255      \r
x8010: x3100   12544  ST    R0, -256     \r
x8011: x33FF   13311  ST    R1, -1       \r
x8012: x3400   13312  ST    R2, 0        \r
x8013: x3601   13825  ST    R3, 1        \r
x8014: x38FF   14591  ST    R4, 255      \r
x8015: x4000   16384  JSRR  R0           \r
x8016: x41C0   16832  JSRR  R7           \r
x8017: x4BFF   19455  JSR   1023         \r
x8018: x4C00   19456  JSR   -1024        \r
x8019: x52A0   21152  AND   R1, R2, 0    \r
x801A: x572F   22319  AND   R3, R4, 15   \r
x801B: x5BB0   23472  AND   R5, R6, -16  \r
x801C: x5FC7   24519  AND   R7, R7, R7   \r
x801D: x6280   25216  LDR   R1, R2, 0    \r
x801E: x64FF   25855  LDR   R2, R3, -1   \r
x801F: x6701   26369  LDR   R3, R4, 1    \r
x8020: x695F   26975  LDR   R4, R5, 31   \r
x8021: x6BA0   27552  LDR   R5, R6, -32  \r
x8022: x7280   29312  STR   R1, R2, 0    \r
x8023: x74FF   29951  STR   R2, R3, -1   \r
x8024: x7701   30465  STR   R3, R4, 1    \r
x8025: x795F   31071  STR   R4, R5, 31   \r
x8026: x7BA0   31648  STR   R5, R6, -32  \r
x8027: x8000   32768  RTI                \r
x8028: x903F   36927  NOT   R0, R0       \r
x8029: x97FF   38911  NOT   R3, R7       \r
x802A: xA000   40960  LDI   R0, 0        \r
x802B: xA3FF   41983  LDI   R1, -1       \r
x802C: xA401   41985  LDI   R2, 1        \r
x802D: xA700   42752  LDI   R3, -256     \r
x802E: xA8FF   43263  LDI   R4, 255      \r
x802F: xB000   45056  STI   R0, 0        \r
x8030: xB3FF   46079  STI   R1, -1       \r
x8031: xB401   46081  STI   R2, 1        \r
x8032: xB700   46848  STI   R3, -256     \r
x8033: xB8FF   47359  STI   R4, 255      \r
x8034: xC000   49152  JMP   R0           \r
x8035: xC1C0   49600  JMP   R7           \r
x8036: xD000   53248  ERR                \r
x8037: xE100   57600  LEA   R0, -256     \r
x8038: xE3FF   58367  LEA   R1, -1       \r
x8039: xE400   58368  LEA   R2, 0        \r
x803A: xE601   58881  LEA   R3, 1        \r
x803B: xE8FF   59647  LEA   R4, 255      \r
x803C: xF000   61440  TRAP  x0           \r
x803D: xF020   61472  TRAP  x20          \r
x803E: xF021   61473  TRAP  x21          \r
x803F: xF022   61474  TRAP  x22          \r
x8040: xF023   61475  TRAP  x23          \r
x8041: xF025   61477  TRAP  x25          \r
x8042: xF0FE   61694  TRAP  xFE          \r
x8043: xF0FF   61695  TRAP  xFF          \r
\r
\r
Beginning execution; type h for help\r
\$> "
send -- "h\r"
expect -exact "h\r
Simulator commands:\r
h, H, or ? for help (prints this message)\r
q or Q to quit\r
d or D to dump the control unit and memory\r
An integer > 0 to execute that many instruction cycles\r
Or just return, which executes one instruction cycle\r
\$> "
send -- "d\r"
expect -exact "d\r
CPU STATE:\r
PC = x8000   IR = x0000   CC = Z   RUNNING: 1\r
R0 x0000  0       R1 x0000  0       R2 x0000  0       R3 x0000  0    \r
R4 x0000  0       R5 x0000  0       R6 x0000  0       R7 x0000  0    \r
\r
MEMORY (from x0000):\r
x8001: x0200     512  BRP   0            \r
x8002: x0401    1025  BRZ   1            \r
x8003: x09FF    2559  BRN   -1           \r
x8004: x0AFF    2815  BRNP  255          \r
x8005: x0D00    3328  BRNZ  -256         \r
x8006: x0E00    3584  BR    0            \r
x8007: x12A0    4768  ADD   R1, R2, 0    \r
x8008: x172F    5935  ADD   R3, R4, 15   \r
x8009: x1BB0    7088  ADD   R5, R6, -16  \r
x800A: x1FC7    8135  ADD   R7, R7, R7   \r
x800B: x2100    8448  LD    R0, -256     \r
x800C: x23FF    9215  LD    R1, -1       \r
x800D: x2400    9216  LD    R2, 0        \r
x800E: x2601    9729  LD    R3, 1        \r
x800F: x28FF   10495  LD    R4, 255      \r
x8010: x3100   12544  ST    R0, -256     \r
x8011: x33FF   13311  ST    R1, -1       \r
x8012: x3400   13312  ST    R2, 0        \r
x8013: x3601   13825  ST    R3, 1        \r
x8014: x38FF   14591  ST    R4, 255      \r
x8015: x4000   16384  JSRR  R0           \r
x8016: x41C0   16832  JSRR  R7           \r
x8017: x4BFF   19455  JSR   1023         \r
x8018: x4C00   19456  JSR   -1024        \r
x8019: x52A0   21152  AND   R1, R2, 0    \r
x801A: x572F   22319  AND   R3, R4, 15   \r
x801B: x5BB0   23472  AND   R5, R6, -16  \r
x801C: x5FC7   24519  AND   R7, R7, R7   \r
x801D: x6280   25216  LDR   R1, R2, 0    \r
x801E: x64FF   25855  LDR   R2, R3, -1   \r
x801F: x6701   26369  LDR   R3, R4, 1    \r
x8020: x695F   26975  LDR   R4, R5, 31   \r
x8021: x6BA0   27552  LDR   R5, R6, -32  \r
x8022: x7280   29312  STR   R1, R2, 0    \r
x8023: x74FF   29951  STR   R2, R3, -1   \r
x8024: x7701   30465  STR   R3, R4, 1    \r
x8025: x795F   31071  STR   R4, R5, 31   \r
x8026: x7BA0   31648  STR   R5, R6, -32  \r
x8027: x8000   32768  RTI                \r
x8028: x903F   36927  NOT   R0, R0       \r
x8029: x97FF   38911  NOT   R3, R7       \r
x802A: xA000   40960  LDI   R0, 0        \r
x802B: xA3FF   41983  LDI   R1, -1       \r
x802C: xA401   41985  LDI   R2, 1        \r
x802D: xA700   42752  LDI   R3, -256     \r
x802E: xA8FF   43263  LDI   R4, 255      \r
x802F: xB000   45056  STI   R0, 0        \r
x8030: xB3FF   46079  STI   R1, -1       \r
x8031: xB401   46081  STI   R2, 1        \r
x8032: xB700   46848  STI   R3, -256     \r
x8033: xB8FF   47359  STI   R4, 255      \r
x8034: xC000   49152  JMP   R0           \r
x8035: xC1C0   49600  JMP   R7           \r
x8036: xD000   53248  ERR                \r
x8037: xE100   57600  LEA   R0, -256     \r
x8038: xE3FF   58367  LEA   R1, -1       \r
x8039: xE400   58368  LEA   R2, 0        \r
x803A: xE601   58881  LEA   R3, 1        \r
x803B: xE8FF   59647  LEA   R4, 255      \r
x803C: xF000   61440  TRAP  x0           \r
x803D: xF020   61472  TRAP  x20          \r
x803E: xF021   61473  TRAP  x21          \r
x803F: xF022   61474  TRAP  x22          \r
x8040: xF023   61475  TRAP  x23          \r
x8041: xF025   61477  TRAP  x25          \r
x8042: xF0FE   61694  TRAP  xFE          \r
x8043: xF0FF   61695  TRAP  xFF          \r
\r
\$> "
send -- "\r"
expect -exact "\r
x8000: x0000  NOP   0            ; CC = Z, no branch\r
\$> "
send -- "\r"
expect -exact "\r
x8001: x0200  BRP   0            ; CC = Z, no branch\r
\$> "
send -- "\r"
expect -exact "\r
x8002: x0401  BRZ   1            ; CC = Z, PC <- x8003+1 = x8004\r
\$> "
send -- "\r"
expect -exact "\r
x8004: x0AFF  BRNP  255          ; CC = Z, no branch\r
\$> "
send -- "\r"
expect -exact "\r
x8005: x0D00  BRNZ  -256         ; CC = Z, PC <- x8006-256 = x7F06\r
\$> "
send -- "\r"
expect -exact "\r
x7F06: x0000  NOP   0            ; CC = Z, no branch\r
\$> "
send -- "\r"
expect -exact "\r
x7F07: x0000  NOP   0            ; CC = Z, no branch\r
\$> "
send -- "\r"
expect -exact "\r
x7F08: x0000  NOP   0            ; CC = Z, no branch\r
\$> "
send -- "\r"
expect -exact "\r
x7F09: x0000  NOP   0            ; CC = Z, no branch\r
\$> "
send -- "\r"
expect -exact "\r
x7F0A: x0000  NOP   0            ; CC = Z, no branch\r
\$> "
send -- "\r"
expect -exact "\r
x7F0B: x0000  NOP   0            ; CC = Z, no branch\r
\$> "
send -- "\r"
expect -exact "\r
x7F0C: x0000  NOP   0            ; CC = Z, no branch\r
\$> "
send -- "\r"
expect -exact "\r
x7F0D: x0000  NOP   0            ; CC = Z, no branch\r
\$> "
send -- "\r"
expect -exact "\r
x7F0E: x0000  NOP   0            ; CC = Z, no branch\r
\$> "
send -- "\r"
expect -exact "\r
x7F0F: x0000  NOP   0            ; CC = Z, no branch\r
\$> "
send -- "\r"
expect -exact "\r
x7F10: x0000  NOP   0            ; CC = Z, no branch\r
\$> "
send -- "\r"
expect -exact "\r
x7F11: x0000  NOP   0            ; CC = Z, no branch\r
\$> "
send -- "\r"
expect -exact "\r
x7F12: x0000  NOP   0            ; CC = Z, no branch\r
\$> "
send -- "\r"
expect -exact "\r
x7F13: x0000  NOP   0            ; CC = Z, no branch\r
\$> "
send -- "\r"
expect -exact "\r
x7F14: x0000  NOP   0            ; CC = Z, no branch\r
\$> "
send -- "\r"
expect -exact "\r
x7F15: x0000  NOP   0            ; CC = Z, no branch\r
\$> "
send -- "\r"
expect -exact "\r
x7F16: x0000  NOP   0            ; CC = Z, no branch\r
\$> "
send -- "\r"
expect -exact "\r
x7F17: x0000  NOP   0            ; CC = Z, no branch\r
\$> "
send -- "d\r"
expect -exact "d\r
CPU STATE:\r
PC = x7F18   IR = x0000   CC = Z   RUNNING: 1\r
R0 x0000  0       R1 x0000  0       R2 x0000  0       R3 x0000  0    \r
R4 x0000  0       R5 x0000  0       R6 x0000  0       R7 x0000  0    \r
\r
MEMORY (from x0000):\r
x8001: x0200     512  BRP   0            \r
x8002: x0401    1025  BRZ   1            \r
x8003: x09FF    2559  BRN   -1           \r
x8004: x0AFF    2815  BRNP  255          \r
x8005: x0D00    3328  BRNZ  -256         \r
x8006: x0E00    3584  BR    0            \r
x8007: x12A0    4768  ADD   R1, R2, 0    \r
x8008: x172F    5935  ADD   R3, R4, 15   \r
x8009: x1BB0    7088  ADD   R5, R6, -16  \r
x800A: x1FC7    8135  ADD   R7, R7, R7   \r
x800B: x2100    8448  LD    R0, -256     \r
x800C: x23FF    9215  LD    R1, -1       \r
x800D: x2400    9216  LD    R2, 0        \r
x800E: x2601    9729  LD    R3, 1        \r
x800F: x28FF   10495  LD    R4, 255      \r
x8010: x3100   12544  ST    R0, -256     \r
x8011: x33FF   13311  ST    R1, -1       \r
x8012: x3400   13312  ST    R2, 0        \r
x8013: x3601   13825  ST    R3, 1        \r
x8014: x38FF   14591  ST    R4, 255      \r
x8015: x4000   16384  JSRR  R0           \r
x8016: x41C0   16832  JSRR  R7           \r
x8017: x4BFF   19455  JSR   1023         \r
x8018: x4C00   19456  JSR   -1024        \r
x8019: x52A0   21152  AND   R1, R2, 0    \r
x801A: x572F   22319  AND   R3, R4, 15   \r
x801B: x5BB0   23472  AND   R5, R6, -16  \r
x801C: x5FC7   24519  AND   R7, R7, R7   \r
x801D: x6280   25216  LDR   R1, R2, 0    \r
x801E: x64FF   25855  LDR   R2, R3, -1   \r
x801F: x6701   26369  LDR   R3, R4, 1    \r
x8020: x695F   26975  LDR   R4, R5, 31   \r
x8021: x6BA0   27552  LDR   R5, R6, -32  \r
x8022: x7280   29312  STR   R1, R2, 0    \r
x8023: x74FF   29951  STR   R2, R3, -1   \r
x8024: x7701   30465  STR   R3, R4, 1    \r
x8025: x795F   31071  STR   R4, R5, 31   \r
x8026: x7BA0   31648  STR   R5, R6, -32  \r
x8027: x8000   32768  RTI                \r
x8028: x903F   36927  NOT   R0, R0       \r
x8029: x97FF   38911  NOT   R3, R7       \r
x802A: xA000   40960  LDI   R0, 0        \r
x802B: xA3FF   41983  LDI   R1, -1       \r
x802C: xA401   41985  LDI   R2, 1        \r
x802D: xA700   42752  LDI   R3, -256     \r
x802E: xA8FF   43263  LDI   R4, 255      \r
x802F: xB000   45056  STI   R0, 0        \r
x8030: xB3FF   46079  STI   R1, -1       \r
x8031: xB401   46081  STI   R2, 1        \r
x8032: xB700   46848  STI   R3, -256     \r
x8033: xB8FF   47359  STI   R4, 255      \r
x8034: xC000   49152  JMP   R0           \r
x8035: xC1C0   49600  JMP   R7           \r
x8036: xD000   53248  ERR                \r
x8037: xE100   57600  LEA   R0, -256     \r
x8038: xE3FF   58367  LEA   R1, -1       \r
x8039: xE400   58368  LEA   R2, 0        \r
x803A: xE601   58881  LEA   R3, 1        \r
x803B: xE8FF   59647  LEA   R4, 255      \r
x803C: xF000   61440  TRAP  x0           \r
x803D: xF020   61472  TRAP  x20          \r
x803E: xF021   61473  TRAP  x21          \r
x803F: xF022   61474  TRAP  x22          \r
x8040: xF023   61475  TRAP  x23          \r
x8041: xF025   61477  TRAP  x25          \r
x8042: xF0FE   61694  TRAP  xFE          \r
x8043: xF0FF   61695  TRAP  xFF          \r
\r
\$> "
send -- "q\r"
expect eof
