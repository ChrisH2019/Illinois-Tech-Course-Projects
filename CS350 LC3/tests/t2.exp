#!/usr/bin/expect -f
#
# This Expect script was generated by autoexpect on Fri Mar 31 13:45:48 2017
# Expect and autoexpect were both written by Don Libes, NIST.
#
# Note that autoexpect does not guarantee a working script.  It
# necessarily has to guess about certain things.  Two reasons a script
# might fail are:
#
# 1) timing - A surprising number of programs (rn, ksh, zsh, telnet,
# etc.) and devices discard or ignore keystrokes that arrive "too
# quickly" after prompts.  If you find your new script hanging up at
# one spot, try adding a short sleep just before the previous send.
# Setting "force_conservative" to 1 (see below) makes Expect do this
# automatically - pausing briefly before sending each character.  This
# pacifies every program I know of.  The -c flag makes the script do
# this in the first place.  The -C flag allows you to define a
# character to toggle this mode off and on.

set force_conservative 0  ;# set to 1 to force conservative mode even if
			  ;# script wasn't run conservatively originally
if {$force_conservative} {
	set send_slow {1 .1}
	proc send {ignore arg} {
		sleep .1
		exp_send -s -- $arg
	}
}

#
# 2) differing output - Some programs produce different output each time
# they run.  The "date" command is an obvious example.  Another is
# ftp, if it produces throughput statistics at the end of a file
# transfer.  If this causes a problem, delete these patterns or replace
# them with wildcards.  An alternative is to use the -p flag (for
# "prompt") which makes Expect only look for the last line of output
# (i.e., the prompt).  The -P flag allows you to define a character to
# toggle this mode off and on.
#
# Read the man page for more info.
#
# -Don


set timeout -1
set PROG [lindex $argv 0]
spawn ./$PROG tests/t2.hex
match_max 100000
expect -exact "CS 350 Final Project: LC-3 Simulator Loading tests/t2.hex\r
Origin = xA000\r
\r
CPU STATE:\r
PC = xA000   IR = x0000   CC = Z   RUNNING: 1\r
R0 x0000  0       R1 x0000  0       R2 x0000  0       R3 x0000  0    \r
R4 x0000  0       R5 x0000  0       R6 x0000  0       R7 x0000  0    \r
\r
MEMORY (from xA000):\r
xA000: x0401    1025  BRZ   1            \r
xA002: x0C01    3073  BRNZ  1            \r
xA004: x0801    2049  BRN   1            \r
xA005: x0E01    3585  BR    1            \r
xA006: x1023    4131  ADD   R0, R0, 3    \r
xA007: x103F    4159  ADD   R0, R0, -1   \r
xA008: x0201     513  BRP   1            \r
xA009: x0FF6    4086  BR    -10          \r
xA00A: x0A01    2561  BRNP  1            \r
xA00C: x4802   18434  JSR   2            \r
xA00D: xEC04   60420  LEA   R6, 4        \r
xA00E: x4180   16768  JSRR  R6           \r
xA00F: x3E06   15878  ST    R7, 6        \r
xA010: xC1C0   49600  JMP   R7           \r
xA012: x3E04   15876  ST    R7, 4        \r
xA013: x0EFF    3839  BR    255          \r
xA014: xF025   61477  TRAP  x25          \r
xA015: xF000   61440  TRAP  x0           \r
xA016: x0001       1  NOP   1            \r
xA017: x0002       2  NOP   2            \r
xA018: x0003       3  NOP   3            \r
xA113: x0F00    3840  BR    -256         \r
xA114: xF000   61440  TRAP  x0           \r
\r
\r
Beginning execution; type h for help\r
\$> "
send -- "h\r"
expect -exact "h\r
Simulator commands:\r
h, H, or ? for help (prints this message)\r
q or Q to quit\r
d or D to dump the control unit and memory\r
An integer > 0 to execute that many instruction cycles\r
Or just return, which executes one instruction cycle\r
\$> "
send -- "d\r"
expect -exact "d\r
CPU STATE:\r
PC = xA000   IR = x0000   CC = Z   RUNNING: 1\r
R0 x0000  0       R1 x0000  0       R2 x0000  0       R3 x0000  0    \r
R4 x0000  0       R5 x0000  0       R6 x0000  0       R7 x0000  0    \r
\r
MEMORY (from x0000):\r
xA000: x0401    1025  BRZ   1            \r
xA002: x0C01    3073  BRNZ  1            \r
xA004: x0801    2049  BRN   1            \r
xA005: x0E01    3585  BR    1            \r
xA006: x1023    4131  ADD   R0, R0, 3    \r
xA007: x103F    4159  ADD   R0, R0, -1   \r
xA008: x0201     513  BRP   1            \r
xA009: x0FF6    4086  BR    -10          \r
xA00A: x0A01    2561  BRNP  1            \r
xA00C: x4802   18434  JSR   2            \r
xA00D: xEC04   60420  LEA   R6, 4        \r
xA00E: x4180   16768  JSRR  R6           \r
xA00F: x3E06   15878  ST    R7, 6        \r
xA010: xC1C0   49600  JMP   R7           \r
xA012: x3E04   15876  ST    R7, 4        \r
xA013: x0EFF    3839  BR    255          \r
xA014: xF025   61477  TRAP  x25          \r
xA015: xF000   61440  TRAP  x0           \r
xA016: x0001       1  NOP   1            \r
xA017: x0002       2  NOP   2            \r
xA018: x0003       3  NOP   3            \r
xA113: x0F00    3840  BR    -256         \r
xA114: xF000   61440  TRAP  x0           \r
\r
\$> "
send -- "\r"
expect -exact "\r
xA000: x0401  BRZ   1            ; CC = Z, PC <- xA001+1 = xA002\r
\$> "
send -- "\r"
expect -exact "\r
xA002: x0C01  BRNZ  1            ; CC = Z, PC <- xA003+1 = xA004\r
\$> "
send -- "\r"
expect -exact "\r
xA004: x0801  BRN   1            ; CC = Z, no branch\r
\$> "
send -- "\r"
expect -exact "\r
xA005: x0E01  BR    1            ; CC = Z, PC <- xA006+1 = xA007\r
\$> "
send -- "\r"
expect -exact "\r
xA007: x103F  ADD   R0, R0, -1   ; R0 <- x0 -1 = xFFFF; CC = N\r
\$> "
send -- "\r"
expect -exact "\r
xA008: x0201  BRP   1            ; CC = N, no branch\r
\$> "
send -- "\r"
expect -exact "\r
xA009: x0FF6  BR    -10          ; CC = N, PC <- xA00A-10 = xA000\r
\$> "
send -- "\r"
expect -exact "\r
xA000: x0401  BRZ   1            ; CC = N, no branch\r
\$> "
send -- "\r"
expect -exact "\r
xA001: x0000  NOP   0            ; CC = N, no branch\r
\$> "
send -- "\r"
expect -exact "\r
xA002: x0C01  BRNZ  1            ; CC = N, PC <- xA003+1 = xA004\r
\$> "
send -- "\r"
expect -exact "\r
xA004: x0801  BRN   1            ; CC = N, PC <- xA005+1 = xA006\r
\$> "
send -- "\r"
expect -exact "\r
xA006: x1023  ADD   R0, R0, 3    ; R0 <- xFFFF +3 = x2; CC = P\r
\$> "
send -- "\r"
expect -exact "\r
xA007: x103F  ADD   R0, R0, -1   ; R0 <- x2 -1 = x1; CC = P\r
\$> "
send -- "\r"
expect -exact "\r
xA008: x0201  BRP   1            ; CC = P, PC <- xA009+1 = xA00A\r
\$> "
send -- "\r"
expect -exact "\r
xA00A: x0A01  BRNP  1            ; CC = P, PC <- xA00B+1 = xA00C\r
\$> "
send -- "\r"
expect -exact "\r
xA00C: x4802  JSR   2            ; PC <- xA00D +2 = xA00F, R7 <- xA00D\r
\$> "
send -- "\r"
expect -exact "\r
xA00F: x3E06  ST    R7, 6        ; M\[xA016\] <- xA00D\r
\$> "
send -- "\r"
expect -exact "\r
xA010: xC1C0  JMP   R7           ; PC <- xA00D\r
\$> "
send -- "\r"
expect -exact "\r
xA00D: xEC04  LEA   R6, 4        ; R6 <- xA012; CC = N\r
\$> "
send -- "\r"
expect -exact "\r
xA00E: x4180  JSRR  R6           ; PC <- xA012, R7 <- xA00F\r
\$> "
send -- "\r"
expect -exact "\r
xA012: x3E04  ST    R7, 4        ; M\[xA017\] <- xA00F\r
\$> "
send -- "\r"
expect -exact "\r
xA013: x0EFF  BR    255          ; CC = N, PC <- xA014+255 = xA113\r
\$> "
send -- "\r"
expect -exact "\r
xA113: x0F00  BR    -256         ; CC = N, PC <- xA114-256 = xA014\r
\$> "
send -- "\r"
expect -exact "\r
xA014: xF025  TRAP  x25          ; CC = P; Halting\r
\$> "
send -- "\r"
expect -exact "\r
Halted\r
\$> "
send -- "\r"
expect -exact "\r
Halted\r
\$> "
send -- "q\r"
expect eof
