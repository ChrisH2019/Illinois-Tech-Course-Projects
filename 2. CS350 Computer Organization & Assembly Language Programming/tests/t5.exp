#!/usr/bin/expect -f
#
# This Expect script was generated by autoexpect on Fri Mar 31 13:47:23 2017
# Expect and autoexpect were both written by Don Libes, NIST.
#
# Note that autoexpect does not guarantee a working script.  It
# necessarily has to guess about certain things.  Two reasons a script
# might fail are:
#
# 1) timing - A surprising number of programs (rn, ksh, zsh, telnet,
# etc.) and devices discard or ignore keystrokes that arrive "too
# quickly" after prompts.  If you find your new script hanging up at
# one spot, try adding a short sleep just before the previous send.
# Setting "force_conservative" to 1 (see below) makes Expect do this
# automatically - pausing briefly before sending each character.  This
# pacifies every program I know of.  The -c flag makes the script do
# this in the first place.  The -C flag allows you to define a
# character to toggle this mode off and on.

set force_conservative 0  ;# set to 1 to force conservative mode even if
			  ;# script wasn't run conservatively originally
if {$force_conservative} {
	set send_slow {1 .1}
	proc send {ignore arg} {
		sleep .1
		exp_send -s -- $arg
	}
}

#
# 2) differing output - Some programs produce different output each time
# they run.  The "date" command is an obvious example.  Another is
# ftp, if it produces throughput statistics at the end of a file
# transfer.  If this causes a problem, delete these patterns or replace
# them with wildcards.  An alternative is to use the -p flag (for
# "prompt") which makes Expect only look for the last line of output
# (i.e., the prompt).  The -P flag allows you to define a character to
# toggle this mode off and on.
#
# Read the man page for more info.
#
# -Don


set timeout -1
set PROG [lindex $argv 0]
spawn ./$PROG tests/t5.hex
match_max 100000
expect -exact "CS 350 Final Project: LC-3 Simulator Loading tests/t5.hex\r
Origin = xFFFE\r
\r
CPU STATE:\r
PC = xFFFE   IR = x0000   CC = Z   RUNNING: 1\r
R0 x0000  0       R1 x0000  0       R2 x0000  0       R3 x0000  0    \r
R4 x0000  0       R5 x0000  0       R6 x0000  0       R7 x0000  0    \r
\r
MEMORY (from xFFFE):\r
xFFFE: x1234    4660  ADD   R1, R0, -12  \r
xFFFF: xFFFF   65535  TRAP  xFF          \r
x0000: x1010    4112  ADD   R0, R0, R0   \r
x0001: x2121    8481  LD    R0, -223     \r
\r
\r
Beginning execution; type h for help\r
\$> "
send -- "h\r"
expect -exact "h\r
Simulator commands:\r
h, H, or ? for help (prints this message)\r
q or Q to quit\r
d or D to dump the control unit and memory\r
An integer > 0 to execute that many instruction cycles\r
Or just return, which executes one instruction cycle\r
\$> "
send -- "d\r"
expect -exact "d\r
CPU STATE:\r
PC = xFFFE   IR = x0000   CC = Z   RUNNING: 1\r
R0 x0000  0       R1 x0000  0       R2 x0000  0       R3 x0000  0    \r
R4 x0000  0       R5 x0000  0       R6 x0000  0       R7 x0000  0    \r
\r
MEMORY (from x0000):\r
x0000: x1010    4112  ADD   R0, R0, R0   \r
x0001: x2121    8481  LD    R0, -223     \r
xFFFE: x1234    4660  ADD   R1, R0, -12  \r
xFFFF: xFFFF   65535  TRAP  xFF          \r
\r
\$> "
send -- "\r"
expect -exact "\r
xFFFE: x1234  ADD   R1, R0, -12  ; R1 <- x0 -12 = xFFF4; CC = N\r
\$> "
send -- "\r"
expect -exact "\r
xFFFF: xFFFF  TRAP  xFF          ; ; Bad trap vector (halting)\r
\$> "
send -- "\r"
expect -exact "\r
Halted\r
\$> "
send -- "\r"
expect -exact "\r
Halted\r
\$> "
send -- "\r"
expect -exact "\r
Halted\r
\$> "
send -- "d\r"
expect -exact "d\r
CPU STATE:\r
PC = x0000   IR = xFFFF   CC = N   RUNNING: 0\r
R0 x0000  0       R1 xFFF4 -12      R2 x0000  0       R3 x0000  0    \r
R4 x0000  0       R5 x0000  0       R6 x0000  0       R7 x0000  0    \r
\r
MEMORY (from x0000):\r
x0000: x1010    4112  ADD   R0, R0, R0   \r
x0001: x2121    8481  LD    R0, -223     \r
xFFFE: x1234    4660  ADD   R1, R0, -12  \r
xFFFF: xFFFF   65535  TRAP  xFF          \r
\r
\$> "
send -- "q\r"
expect eof
