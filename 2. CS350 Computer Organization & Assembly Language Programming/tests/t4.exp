#!/usr/bin/expect -f
#
# This Expect script was generated by autoexpect on Fri Mar 31 13:46:42 2017
# Expect and autoexpect were both written by Don Libes, NIST.
#
# Note that autoexpect does not guarantee a working script.  It
# necessarily has to guess about certain things.  Two reasons a script
# might fail are:
#
# 1) timing - A surprising number of programs (rn, ksh, zsh, telnet,
# etc.) and devices discard or ignore keystrokes that arrive "too
# quickly" after prompts.  If you find your new script hanging up at
# one spot, try adding a short sleep just before the previous send.
# Setting "force_conservative" to 1 (see below) makes Expect do this
# automatically - pausing briefly before sending each character.  This
# pacifies every program I know of.  The -c flag makes the script do
# this in the first place.  The -C flag allows you to define a
# character to toggle this mode off and on.

set force_conservative 0  ;# set to 1 to force conservative mode even if
			  ;# script wasn't run conservatively originally
if {$force_conservative} {
	set send_slow {1 .1}
	proc send {ignore arg} {
		sleep .1
		exp_send -s -- $arg
	}
}

#
# 2) differing output - Some programs produce different output each time
# they run.  The "date" command is an obvious example.  Another is
# ftp, if it produces throughput statistics at the end of a file
# transfer.  If this causes a problem, delete these patterns or replace
# them with wildcards.  An alternative is to use the -p flag (for
# "prompt") which makes Expect only look for the last line of output
# (i.e., the prompt).  The -P flag allows you to define a character to
# toggle this mode off and on.
#
# Read the man page for more info.
#
# -Don


set timeout -1
set PROG [lindex $argv 0]
spawn ./$PROG tests/t4.hex
match_max 100000
expect -exact "CS 350 Final Project: LC-3 Simulator Loading tests/t4.hex\r
Origin = x7FFE\r
\r
CPU STATE:\r
PC = x7FFE   IR = x0000   CC = Z   RUNNING: 1\r
R0 x0000  0       R1 x0000  0       R2 x0000  0       R3 x0000  0    \r
R4 x0000  0       R5 x0000  0       R6 x0000  0       R7 x0000  0    \r
\r
MEMORY (from x7FFE):\r
x7FFE: xEF00   61184  LEA   R7, -256     \r
x7FFF: xEEFF   61183  LEA   R7, 255      \r
x8000: xABCD   43981  LDI   R5, -51      \r
x8001: x67A0   26528  LDR   R3, R6, -32  \r
x8002: xAAFF   43775  LDI   R5, 255      \r
\r
\r
Beginning execution; type h for help\r
\$> "
send -- "h\r"
expect -exact "h\r
Simulator commands:\r
h, H, or ? for help (prints this message)\r
q or Q to quit\r
d or D to dump the control unit and memory\r
An integer > 0 to execute that many instruction cycles\r
Or just return, which executes one instruction cycle\r
\$> "
send -- "d\r"
expect -exact "d\r
CPU STATE:\r
PC = x7FFE   IR = x0000   CC = Z   RUNNING: 1\r
R0 x0000  0       R1 x0000  0       R2 x0000  0       R3 x0000  0    \r
R4 x0000  0       R5 x0000  0       R6 x0000  0       R7 x0000  0    \r
\r
MEMORY (from x0000):\r
x7FFE: xEF00   61184  LEA   R7, -256     \r
x7FFF: xEEFF   61183  LEA   R7, 255      \r
x8000: xABCD   43981  LDI   R5, -51      \r
x8001: x67A0   26528  LDR   R3, R6, -32  \r
x8002: xAAFF   43775  LDI   R5, 255      \r
\r
\$> "
send -- "\r"
expect -exact "\r
x7FFE: xEF00  LEA   R7, -256     ; R7 <- x7EFF; CC = P\r
\$> "
send -- "\r"
expect -exact "\r
x7FFF: xEEFF  LEA   R7, 255      ; R7 <- x80FF; CC = N\r
\$> "
send -- "\r"
expect -exact "\r
x8000: xABCD  LDI   R5, -51      ; R5 <- M\[M\[x7FCE\]\] = M\[x0000\]  = x0; CC = Z\r
\$> "
send -- "\r"
expect -exact "\r
x8001: x67A0  LDR   R3, R6, -32  ; R3 <- M\[x0000 -32\] = M\[xFFE0\] = x0; CC = Z\r
\$> "
send -- "\r"
expect -exact "\r
x8002: xAAFF  LDI   R5, 255      ; R5 <- M\[M\[x8102\]\] = M\[x0000\]  = x0; CC = Z\r
\$> "
send -- "\r"
expect -exact "\r
x8003: x0000  NOP   0            ; CC = Z, no branch\r
\$> "
send -- "\r"
expect -exact "\r
x8004: x0000  NOP   0            ; CC = Z, no branch\r
\$> "
send -- "\r"
expect -exact "\r
x8005: x0000  NOP   0            ; CC = Z, no branch\r
\$> "
send -- "\r"
expect -exact "\r
x8006: x0000  NOP   0            ; CC = Z, no branch\r
\$> "
send -- "\r"
expect -exact "\r
x8007: x0000  NOP   0            ; CC = Z, no branch\r
\$> "
send -- "\r"
expect -exact "\r
x8008: x0000  NOP   0            ; CC = Z, no branch\r
\$> "
send -- "\r"
expect -exact "\r
x8009: x0000  NOP   0            ; CC = Z, no branch\r
\$> "
send -- "\r"
expect -exact "\r
x800A: x0000  NOP   0            ; CC = Z, no branch\r
\$> "
send -- "\r"
expect -exact "\r
x800B: x0000  NOP   0            ; CC = Z, no branch\r
\$> "
send -- "\r"
expect -exact "\r
x800C: x0000  NOP   0            ; CC = Z, no branch\r
\$> "
send -- "10\r"
expect -exact "10\r
x800D: x0000  NOP   0            ; CC = Z, no branch\r
x800E: x0000  NOP   0            ; CC = Z, no branch\r
x800F: x0000  NOP   0            ; CC = Z, no branch\r
x8010: x0000  NOP   0            ; CC = Z, no branch\r
x8011: x0000  NOP   0            ; CC = Z, no branch\r
x8012: x0000  NOP   0            ; CC = Z, no branch\r
x8013: x0000  NOP   0            ; CC = Z, no branch\r
x8014: x0000  NOP   0            ; CC = Z, no branch\r
x8015: x0000  NOP   0            ; CC = Z, no branch\r
x8016: x0000  NOP   0            ; CC = Z, no branch\r
\$> "
send -- "d\r"
expect -exact "d\r
CPU STATE:\r
PC = x8017   IR = x0000   CC = Z   RUNNING: 1\r
R0 x0000  0       R1 x0000  0       R2 x0000  0       R3 x0000  0    \r
R4 x0000  0       R5 x0000  0       R6 x0000  0       R7 x80FF -32513\r
\r
MEMORY (from x0000):\r
x7FFE: xEF00   61184  LEA   R7, -256     \r
x7FFF: xEEFF   61183  LEA   R7, 255      \r
x8000: xABCD   43981  LDI   R5, -51      \r
x8001: x67A0   26528  LDR   R3, R6, -32  \r
x8002: xAAFF   43775  LDI   R5, 255      \r
\r
\$> "
send -- "q\r"
expect eof
